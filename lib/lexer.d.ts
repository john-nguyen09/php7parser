export declare enum TokenType {
    T_EOF = 0,
    T_ABSTRACT = 1,
    T_AND_EQUAL = 2,
    T_ARRAY = 3,
    T_ARRAY_CAST = 4,
    T_AS = 5,
    T_BAD_CHARACTER = 6,
    T_BOOLEAN_AND = 7,
    T_BOOLEAN_OR = 8,
    T_BOOL_CAST = 9,
    T_BREAK = 10,
    T_CALLABLE = 11,
    T_CASE = 12,
    T_CATCH = 13,
    T_CHARACTER = 14,
    T_CLASS = 15,
    T_CLASS_C = 16,
    T_CLONE = 17,
    T_CLOSE_TAG = 18,
    T_COALESCE = 19,
    T_COMMENT = 20,
    T_CONCAT_EQUAL = 21,
    T_CONST = 22,
    T_CONSTANT_ENCAPSED_STRING = 23,
    T_CONTINUE = 24,
    T_CURLY_OPEN = 25,
    T_DEC = 26,
    T_DECLARE = 27,
    T_DEFAULT = 28,
    T_DIR = 29,
    T_DIV_EQUAL = 30,
    T_DNUMBER = 31,
    T_DOC_COMMENT = 32,
    T_DO = 33,
    T_DOLLAR_OPEN_CURLY_BRACES = 34,
    T_DOUBLE_ARROW = 35,
    T_DOUBLE_CAST = 36,
    T_DOUBLE_COLON = 37,
    T_ECHO = 38,
    T_ELLIPSIS = 39,
    T_ELSE = 40,
    T_ELSEIF = 41,
    T_EMPTY = 42,
    T_ENCAPSED_AND_WHITESPACE = 43,
    T_ENDDECLARE = 44,
    T_ENDFOR = 45,
    T_ENDFOREACH = 46,
    T_ENDIF = 47,
    T_ENDSWITCH = 48,
    T_ENDWHILE = 49,
    T_END_HEREDOC = 50,
    T_EVAL = 51,
    T_EXIT = 52,
    T_EXTENDS = 53,
    T_FILE = 54,
    T_FINAL = 55,
    T_FINALLY = 56,
    T_FOR = 57,
    T_FOREACH = 58,
    T_FUNCTION = 59,
    T_FUNC_C = 60,
    T_GLOBAL = 61,
    T_GOTO = 62,
    T_HALT_COMPILER = 63,
    T_IF = 64,
    T_IMPLEMENTS = 65,
    T_INC = 66,
    T_INCLUDE = 67,
    T_INCLUDE_ONCE = 68,
    T_INLINE_HTML = 69,
    T_INSTANCEOF = 70,
    T_INSTEADOF = 71,
    T_INT_CAST = 72,
    T_INTERFACE = 73,
    T_ISSET = 74,
    T_IS_EQUAL = 75,
    T_IS_GREATER_OR_EQUAL = 76,
    T_IS_IDENTICAL = 77,
    T_IS_NOT_EQUAL = 78,
    T_IS_NOT_IDENTICAL = 79,
    T_IS_SMALLER_OR_EQUAL = 80,
    T_SPACESHIP = 81,
    T_LINE = 82,
    T_LIST = 83,
    T_LNUMBER = 84,
    T_LOGICAL_AND = 85,
    T_LOGICAL_OR = 86,
    T_LOGICAL_XOR = 87,
    T_METHOD_C = 88,
    T_MINUS_EQUAL = 89,
    T_MOD_EQUAL = 90,
    T_MUL_EQUAL = 91,
    T_NAMESPACE = 92,
    T_NS_C = 93,
    T_NS_SEPARATOR = 94,
    T_NEW = 95,
    T_NUM_STRING = 96,
    T_OBJECT_CAST = 97,
    T_OBJECT_OPERATOR = 98,
    T_OPEN_TAG = 99,
    T_OPEN_TAG_WITH_ECHO = 100,
    T_OR_EQUAL = 101,
    T_PAAMAYIM_NEKUDOTAYIM = 102,
    T_PLUS_EQUAL = 103,
    T_POW = 104,
    T_POW_EQUAL = 105,
    T_PRINT = 106,
    T_PRIVATE = 107,
    T_PUBLIC = 108,
    T_PROTECTED = 109,
    T_REQUIRE = 110,
    T_REQUIRE_ONCE = 111,
    T_RETURN = 112,
    T_SL = 113,
    T_SL_EQUAL = 114,
    T_SR = 115,
    T_SR_EQUAL = 116,
    T_START_HEREDOC = 117,
    T_STATIC = 118,
    T_STRING = 119,
    T_STRING_CAST = 120,
    T_STRING_VARNAME = 121,
    T_SWITCH = 122,
    T_THROW = 123,
    T_TRAIT = 124,
    T_TRAIT_C = 125,
    T_TRY = 126,
    T_UNSET = 127,
    T_UNSET_CAST = 128,
    T_USE = 129,
    T_VAR = 130,
    T_VARIABLE = 131,
    T_WHILE = 132,
    T_WHITESPACE = 133,
    T_XOR_EQUAL = 134,
    T_YIELD = 135,
    T_YIELD_FROM = 136,
}
export declare enum LexerMode {
    Initial = 0,
    Scripting = 1,
    LookingForProperty = 2,
    DoubleQuotes = 3,
    NowDoc = 4,
    HereDoc = 5,
    EndHereDoc = 6,
    BackQuote = 7,
    VarOffset = 8,
    LookingForVarName = 9,
}
export interface Token {
    type: TokenType | string;
    text: string;
    mode: LexerMode[];
    range: Range;
}
export interface Position {
    line: number;
    char: number;
}
export interface Range {
    start: Position;
    end: Position;
}
export declare class Lexer {
    private _state;
    private _patterns;
    private _table;
    constructor();
    setInput(text: string, mode?: LexerMode[]): void;
    clear(): void;
    lex(): Token;
    lexAll(): Token[];
    private concatRegExpArray(regExpArray);
}
